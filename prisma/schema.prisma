datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String        @id @default(uuid())
  name                   String
  email                  String        @unique
  password               String        // Will be hashed
  role                   String        @default("guest") // "admin", "user", "pic", "staff", "guest"
  metadata               String?       // JSON string for additional user data
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  
  profile                UserProfile?
  notifications          Notification[]
  
  transactions           Transaction[] @relation("CreatedBy")
  expenses               Expense[]     @relation("ExpenseCreatedBy")
  
  updatedTransactions    Transaction[] @relation("TransactionUpdatedBy")
  deletedTransactions    Transaction[] @relation("TransactionDeletedBy")
  updatedExpenses        Expense[]     @relation("ExpenseUpdatedBy")
  deletedExpenses        Expense[]     @relation("ExpenseDeletedBy")
  
  picTransactions        Transaction[] @relation("TransactionPIC")
  
  createdVendors         Vendor[]      @relation("VendorCreatedBy")
  updatedVendors         Vendor[]      @relation("VendorUpdatedBy")
  deletedVendors         Vendor[]      @relation("VendorDeletedBy")
  
  createdClients         Client[]      @relation("ClientCreatedBy")
  updatedClients         Client[]      @relation("ClientUpdatedBy")
  deletedClients         Client[]      @relation("ClientDeletedBy")
  
  createdInvoices        Invoice[]     @relation("InvoiceCreatedBy")
  
  // Inventory relations
  createdInventories     Inventory[]   @relation("InventoryCreatedBy")
  updatedInventories     Inventory[]   @relation("InventoryUpdatedBy")
  deletedInventories     Inventory[]   @relation("InventoryDeletedBy")
  inventoryAdjustments   InventoryAdjustment[] @relation("AdjustmentBy")
}

model UserProfile {
  id                      String    @id @default(uuid())
  userId                  String    @unique
  user                    User      @relation(fields: [userId], references: [id])
  fullName                String?
  phoneNumber             String?
  position                String?
  department              String?
  address                 String?
  bio                     String?   @db.Text
  skills                  String?
  experience              String?   @db.Text
  enableEmailNotifications Boolean   @default(true)
  enablePushNotifications  Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model Notification {
  id          String    @id @default(uuid())
  type        String    // e.g., "SUBSCRIPTION_REMINDER", "SUBSCRIPTION_PAYMENT", etc.
  title       String
  message     String    @db.Text
  isRead      Boolean   @default(false)
  readAt      DateTime?
  dueDate     DateTime?
  entityId    String?   // ID of related entity (e.g., inventory ID)
  entityType  String?   // Type of related entity (e.g., "INVENTORY")
  
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CompanyFinance {
  id         String   @id @default(uuid())
  totalFunds Float    @default(0.0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Transaction {
  id                String    @id @default(uuid())
  amount            Float
  projectValue      Float?
  totalProfit       Float?
  downPaymentAmount Float?
  remainingAmount   Float?
  status            String
  paymentStatus     String
  email             String?
  phone             String?
  name              String
  description       String
  date              DateTime
  startDate         DateTime?
  endDate           DateTime?
  paymentProofLink  String?
  expenses          Expense[]
  capitalCost       Float?
  
  createdById       String?
  createdBy         User?      @relation("CreatedBy", fields: [createdById], references: [id])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  updatedById       String?
  isDeleted         Boolean    @default(false)
  deletedAt         DateTime?
  deletedById       String?
  updatedBy         User?      @relation("TransactionUpdatedBy", fields: [updatedById], references: [id])
  deletedBy         User?      @relation("TransactionDeletedBy", fields: [deletedById], references: [id])
  
  clientId          String?
  client            Client?    @relation(fields: [clientId], references: [id])
  
  vendorId          String?
  vendor            Vendor?    @relation(fields: [vendorId], references: [id])
  
  picId             String?
  pic               User?      @relation("TransactionPIC", fields: [picId], references: [id])
  
  invoices          Invoice[]
}

model Expense {
  id                 String       @id @default(uuid())
  category           String
  amount             Float
  description        String?
  date               DateTime     @default(now())
  paymentProofLink   String?
  transactionId      String?
  transaction        Transaction? @relation(fields: [transactionId], references: [id])
  fundType           String       @default("petty_cash") // Indicates fund source (petty_cash or profit_bank)
  inventoryId        String?
  inventory          Inventory?   @relation(fields: [inventoryId], references: [id])
  
  // New fields for recurring expenses
  isRecurringExpense Boolean      @default(false)
  recurringFrequency String?      // "MONTHLY", "QUARTERLY", "ANNUALLY"
  nextBillingDate    DateTime?
  lastProcessedDate  DateTime?
  isActive           Boolean      @default(true) // Used to disable recurring expenses without deleting
  
  createdById        String?
  createdBy          User?        @relation("ExpenseCreatedBy", fields: [createdById], references: [id])
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  updatedById        String?
  isDeleted          Boolean      @default(false)
  deletedAt          DateTime?
  deletedById        String?
  updatedBy          User?        @relation("ExpenseUpdatedBy", fields: [updatedById], references: [id])
  deletedBy          User?        @relation("ExpenseDeletedBy", fields: [deletedById], references: [id])
  
  @@index([isRecurringExpense, isActive])
  @@index([nextBillingDate])
}

model Budget {
  id       String @id @default(uuid())
  category String
  budget   Float
  actual   Float
}

model Client {
  id              String        @id @default(uuid())
  code            String        @unique
  name            String
  email           String?
  phone           String?
  address         String?
  description     String?
  transactions    Transaction[]
  invoices        Invoice[]
  
  createdById     String?
  createdBy       User?         @relation("ClientCreatedBy", fields: [createdById], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  updatedById     String?
  updatedBy       User?         @relation("ClientUpdatedBy", fields: [updatedById], references: [id])
  
  isDeleted       Boolean       @default(false)
  deletedAt       DateTime?
  deletedById     String?
  deletedBy       User?         @relation("ClientDeletedBy", fields: [deletedById], references: [id])
}

model Vendor {
  id              String        @id @default(uuid())
  name            String
  serviceDesc     String
  email           String?
  phone           String?
  address         String?
  transactions    Transaction[]
  inventories     Inventory[]
  
  createdById     String?
  createdBy       User?         @relation("VendorCreatedBy", fields: [createdById], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  updatedById     String?
  updatedBy       User?         @relation("VendorUpdatedBy", fields: [updatedById], references: [id])
  
  isDeleted       Boolean       @default(false)
  deletedAt       DateTime?
  deletedById     String?
  deletedBy       User?         @relation("VendorDeletedBy", fields: [deletedById], references: [id])
}

model Invoice {
  id                String      @id @default(uuid())
  invoiceNumber     String      @unique
  date              DateTime
  dueDate           DateTime
  amount            Float
  tax               Float?
  totalAmount       Float
  paymentStatus     String      @default("Belum Bayar")
  description       String?
  transactionId     String?
  transaction       Transaction? @relation(fields: [transactionId], references: [id])
  clientId          String?
  client            Client?     @relation(fields: [clientId], references: [id])
  
  createdById       String?
  createdBy         User?       @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Inventory {
  id                String               @id @default(uuid())
  name              String
  type              String    // "EQUIPMENT", "SUBSCRIPTION", "OTHER"
  description       String?
  status            String    @default("ACTIVE") // "ACTIVE", "INACTIVE", "MAINTENANCE"
  purchaseDate      DateTime
  expiryDate        DateTime?
  expiryType        String?   // "fixed" or "continuous"
  cost              Decimal
  currentValue      Decimal?
  paymentStatus     String    @default("BELUM_BAYAR") // "LUNAS", "DP", "BELUM_BAYAR"
  downPaymentAmount Decimal?
  remainingAmount   Decimal?
  category          String?
  quantity          Int       @default(0)
  unitPrice         Decimal   @default(0)
  totalValue        Decimal   @default(0)
  location          String?
  minimumStock      Int?
  supplier          String?
  
  // Subscription fields
  isRecurring       Boolean   @default(false)
  recurringType     String?   // "MONTHLY", "QUARTERLY", "ANNUALLY"
  nextBillingDate   DateTime?
  reminderDays      Int?      // Days before to send reminder
  lastBillingDate   DateTime? // Track last time a payment was processed
  autoRenew         Boolean   @default(true) // Whether to auto-renew subscription
  
  // Relationships
  vendorId          String?
  vendor            Vendor?   @relation(fields: [vendorId], references: [id])
  expenses          Expense[]
  adjustments       InventoryAdjustment[]
  
  // Tracking and soft delete
  createdById       String?
  createdBy         User?     @relation("InventoryCreatedBy", fields: [createdById], references: [id])
  updatedById       String?
  updatedBy         User?     @relation("InventoryUpdatedBy", fields: [updatedById], references: [id])
  deletedById       String?
  deletedBy         User?     @relation("InventoryDeletedBy", fields: [deletedById], references: [id])
  isDeleted         Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  @@index([category])
  @@index([isDeleted])
  @@index([nextBillingDate])
  @@index([type, isRecurring])
}

model InventoryAdjustment {
  id                String     @id @default(uuid())
  inventoryId       String
  adjustmentType    String     // 'increase' or 'decrease'
  quantity          Int
  previousQuantity  Int
  newQuantity       Int
  reason            String?    // e.g., 'purchase', 'sales', 'damaged', 'correction'
  notes             String?
  adjustedAt        DateTime   @default(now())
  adjustedById      String?
  inventory         Inventory  @relation(fields: [inventoryId], references: [id])
  adjustedBy        User?      @relation("AdjustmentBy", fields: [adjustedById], references: [id])

  @@index([inventoryId])
  @@index([adjustedAt])
}